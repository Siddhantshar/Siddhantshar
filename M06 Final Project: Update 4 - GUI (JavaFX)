import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.scene.layout.GridPane;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

public class GradebookApp extends Application {

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Student Gradebook System");

        Button btnAddStudent = new Button("Add New Student");
        Button btnMonitorGrades = new Button("Monitor Grades");
        Button btnFinalGrades = new Button("Determine Final Grades");
        Button btnProgressReports = new Button("Generate Progress Reports");
        Button btnExit = new Button("Exit");

        VBox vbox = new VBox(10, btnAddStudent, btnMonitorGrades, btnFinalGrades, btnProgressReports, btnExit);
        vbox.setPadding(new Insets(20));
        vbox.setAlignment(Pos.CENTER);

        Scene mainScene = new Scene(vbox, 300, 250);

        primaryStage.setScene(mainScene);
        primaryStage.show();

        // Set button actions
        btnAddStudent.setOnAction(e -> showAddStudentScreen());
        btnMonitorGrades.setOnAction(e -> showMonitorGradesScreen());
        btnFinalGrades.setOnAction(e -> showFinalGradesScreen());
        btnProgressReports.setOnAction(e -> showProgressReportsScreen());
        btnExit.setOnAction(e -> primaryStage.close());
    }

    private void showAddStudentScreen() {
        Stage addStudentStage = new Stage();
        addStudentStage.setTitle("Add New Student");

        GridPane gridPane = new GridPane();
        gridPane.setPadding(new Insets(20));
        gridPane.setVgap(10);
        gridPane.setHgap(10);

        TextField tfStudentID = new TextField();
        TextField tfFirstName = new TextField();
        TextField tfLastName = new TextField();
        DatePicker dpDateOfBirth = new DatePicker();

        Button btnSave = new Button("Save");
        Button btnCancel = new Button("Cancel");

        gridPane.add(new Label("Student ID:"), 0, 0);
        gridPane.add(tfStudentID, 1, 0);
        gridPane.add(new Label("First Name:"), 0, 1);
        gridPane.add(tfFirstName, 1, 1);
        gridPane.add(new Label("Last Name:"), 0, 2);
        gridPane.add(tfLastName, 1, 2);
        gridPane.add(new Label("Date of Birth:"), 0, 3);
        gridPane.add(dpDateOfBirth, 1, 3);
        gridPane.add(btnSave, 0, 4);
        gridPane.add(btnCancel, 1, 4);

        btnSave.setOnAction(event -> {
            String studentID = tfStudentID.getText();
            String firstName = tfFirstName.getText();
            String lastName = tfLastName.getText();
            LocalDate dateOfBirth = dpDateOfBirth.getValue();

            Student newStudent = new Student(studentID, firstName, lastName, dateOfBirth, new HashMap<>());
            System.out.println("Student added: " + newStudent);
            addStudentStage.close();
        });

        btnCancel.setOnAction(event -> addStudentStage.close());

        Scene scene = new Scene(gridPane, 400, 300);
        addStudentStage.setScene(scene);
        addStudentStage.show();
    }

    private void showMonitorGradesScreen() {
        // Code to show Monitor Grades screen
        System.out.println("Monitor Grades screen will be implemented here.");
    }

    private void showFinalGradesScreen() {
        // Code to show Determine Final Grades screen
        System.out.println("Determine Final Grades screen will be implemented here.");
    }

    private void showProgressReportsScreen() {
        // Code to show Generate Progress Reports screen
        System.out.println("Generate Progress Reports screen will be implemented here.");
    }

    public static void main(String[] args) {
        launch(args);
    }

    // Example Student class
    public class Student {
        private String studentID;
        private String firstName;
        private String lastName;
        private LocalDate dateOfBirth;
        private Map<String, List<Grade>> grades;

        public Student(String studentID, String firstName, String lastName, LocalDate dateOfBirth, Map<String, List<Grade>> grades) {
            this.studentID = studentID;
            this.firstName = firstName;
            this.lastName = lastName;
            this.dateOfBirth = dateOfBirth;
            this.grades = grades;
        }

        @Override
        public String toString() {
            return "Student{" +
                    "studentID='" + studentID + '\'' +
                    ", firstName='" + firstName + '\'' +
                    ", lastName='" + lastName + '\'' +
                    ", dateOfBirth=" + dateOfBirth +
                    ", grades=" + grades +
                    '}';
        }
    }

    // Example Grade class
    public class Grade {
        private String evaluationName;
        private String evaluationType;
        private double score;
        private double maximumScore;
        private LocalDate assessmentDate;

        public Grade(String evaluationName, String evaluationType, double score, double maximumScore, LocalDate assessmentDate) {
            this.evaluationName = evaluationName;
            this.evaluationType = evaluationType;
            this.score = score;
            this.maximumScore = maximumScore;
            this.assessmentDate = assessmentDate;
        }

        @Override
        public String toString() {
            return "Grade{" +
                    "evaluationName='" + evaluationName + '\'' +
                    ", evaluationType='" + evaluationType + '\'' +
                    ", score=" + score +
                    ", maximumScore=" + maximumScore +
                    ", assessmentDate=" + assessmentDate +
                    '}';
        }
    }
}
